<documentation>
	<class>
		<name>Console</name>
		<inherits></inherits>
		<description>
			The `Console` class provides functionality for printing messages and controlling text colors in the console. It allows for outputting messages with different text colors and log levels.
		</description>

		<members>
			<variable>
				<signature>
					Color text_colors[(int)Log::Level::Max]
				</signature>
				<description>
					An array of text colors associated with each log level. These colors determine the text color when printing messages with a specific log level.
				</description>
			</variable>
			<variable>
				<signature>
					Color current_color
				</signature>
				<description>
					The current text color to use when printing messages without specifying a log level. Defaults to `Color::White`.
				</description>
			</variable>
		</members>

		<methods>
			<method>
				<signature>
					void set_text_color(Log::Level p_level, Color p_color)
				</signature>
				<description>
					Sets the text color associated with a specific log level.
				</description>
				<param name="p_level">
					The log level for which to set the text color.
				</param>
				<param name="p_color">
					The text color to associate with the log level.
				</param>
			</method>

			<method>
				<signature>
					Color get_text_color(Log::Level p_level) const
				</signature>
				<description>
					Retrieves the text color associated with a specific log level.
				</description>
				<param name="p_level">
					The log level for which to retrieve the text color.
				</param>
				<returns>
					The text color associated with the specified log level.
				</returns>
			</method>

			<method>
				<signature>
					void set_text_color(Color p_color)
				</signature>
				<description>
					Sets the current text color for printing messages without specifying a log level.
				</description>
				<param name="p_color">
					The text color to set as the current text color.
				</param>
			</method>

			<method>
				<signature>
					Color get_text_color() const
				</signature>
				<description>
					Retrieves the current text color for printing messages without specifying a log level.
				</description>
				<returns>
					The current text color.
				</returns>
			</method>

			<method>
				<signature>
					void print_string(const String&amp; p_string)
				</signature>
				<description>
					Prints a string to the console.
				</description>
				<param name="p_string">
					The string to print.
				</param>
			</method>

			<method>
				<signature>
					void print_line(const String&amp; p_string)
				</signature>
				<description>
					Prints a string followed by a newline character to the console.
				</description>
				<param name="p_string">
					The string to print.
				</param>
			</method>

			<method>
				<signature>
					void print_string(Log::Level p_level, const String&amp; p_string)
				</signature>
				<description>
					Prints a string to the console with a specified log level, using the associated text color.
				</description>
				<param name="p_level">
					The log level for the printed message.
				</param>
				<param name="p_string">
					The string to print.
				</param>
			</method>

			<method>
				<signature>
					void print_info(const String&amp; p_string)
				</signature>
				<description>
					Prints an informational message to the console with the "Info" log level.
				</description>
				<param name="p_string">
					The string to print.
				</param>
			</method>

			<method>
				<signature>
					void print_warn(const String&amp; p_string)
				</signature>
				<description>
					Prints a warning message to the console with the "Warn" log level.
				</description>
				<param name="p_string">
					The string to print.
				</param>
			</method>

			<method>
				<signature>
					void print_error(const String&amp; p_string)
				</signature>
				<description>
					Prints an error message to the console with the "Error" log level.
				</description>
				<param name="p_string">
					The string to print.
				</param>
			</method>

			<method>
				<signature>
					void log_string(Log::Level p_level, const String&amp; p_string)
				</signature>
				<description>
					Logs a string with a specified log level, using the associated text color.
				</description>
				<param name="p_level">
					The log level for the logged message.
				</param>
				<param name="p_string">
					The string to log.
				</param>
			</method>

			<method>
				<signature>
					void log_info(const String&amp; p_string)
				</signature>
				<description>
					Logs an informational message with the "Info" log level.
				</description>
				<param name="p_string">
					The string to log.
				</param>
			</method>

			<method>
				<signature>
					void log_warn(const String&amp; p_string)
				</signature>
				<description>
					Logs a warning message with the "Warn" log level.
				</description>
				<param name="p_string">
					The string to log.
				</param>
			</method>

			<method>
				<signature>
					void log_error(const String&amp; p_string)
				</signature>
				<description>
					Logs an error message with the "Error" log level.
				</description>
				<param name="p_string">
					The string to log.
				</param>
			</method>

			<method>
				<signature>
					Console()
				</signature>
				<description>
					Constructor for the `Console` class, initializes the console with default settings.
				</description>
			</method>

			<method>
				<signature>
					virtual ~Console()
				</signature>
				<description>
					Destructor for the `Console` class.
				</description>
			</method>
		</methods>
	</class>
</documentation>
