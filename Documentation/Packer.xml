<?xml version="1.0" encoding="utf-8"?>
<documentation>
	<class>
		<name>Packer</name>
		<inherits>None</inherits>
		<description>
			The `Packer` class is responsible for packing files from a source directory to a destination directory based on specified criteria.
		</description>

		<enum>
			<name>PackMode</name>
			<values>
				<value>
					<name>Unknown</name>
					<description>An unknown pack mode.</description>
				</value>
				<value>
					<name>Include</name>
					<description>Include matching extensions during packing.</description>
				</value>
				<value>
					<name>Exclude</name>
					<description>Exclude matching extensions during packing.</description>
				</value>
				<value>
					<name>Everything</name>
					<description>Pack everything, regardless of extensions.</description>
				</value>
				<value>
					<name>Max</name>
					<description>The maximum value in the pack mode enum.</description>
				</value>
			</values>
		</enum>

		<function>
			<return-type>String</return-type>
			<name>get_pack_mode_string</name>
			<parameters>
				<parameter>
					<type>PackMode</type>
					<name>p_mode</name>
				</parameter>
			</parameters>
			<brief>
				Get a string representation of the pack mode.
			</brief>
			<description>
				This function returns a string representation of the given pack mode.
			</description>
		</function>

		<function>
			<return-type>PackMode</return-type>
			<name>find_pack_mode</name>
			<parameters>
				<parameter>
					<type>const String&amp;</type>
					<name>p_mode</name>
				</parameter>
			</parameters>
			<brief>
				Find a pack mode by its string representation.
			</brief>
			<description>
				This function finds a pack mode by its string representation and returns the corresponding `PackMode` enum value. If the provided string does not match any known pack mode, it returns `PackMode::Unknown`.
			</description>
		</function>
		<enum name="ExtensionAdjust">
			<description>
				An enumeration representing different cases for file extensions.
			</description>

			<values>
				<value name="Unknown">
					<description>An unknown extension case.</description>
				</value>
				<value name="Default">
					<description>The default extension case.</description>
				</value>
				<value name="Lower">
					<description>The lowercase extension case.</description>
				</value>
				<value name="Upper">
					<description>The uppercase extension case.</description>
				</value>
				<value name="Max">
					<description>Maximum value for the ExtensionAdjust enum.</description>
				</value>
			</values>
		</enum>

		<functions>
			<function>
				<signature>
					String get_extension_case_string(ExtensionAdjust p_adjust)
				</signature>
				<description>
					Retrieves a string representation of the given extension case.
				</description>
				<param name="p_adjust">
					The extension case to get the string representation for.
				</param>
				<returns>
					The extension case as a string.
				</returns>
			</function>
			<function>
				<signature>
					ExtensionAdjust find_extension_case(const String&amp; p_adjust)
				</signature>
				<description>
					Finds the extension case corresponding to the given string representation.
				</description>
				<param name="p_adjust">
					The string representation of the extension case to find.
				</param>
				<returns>
					The ExtensionAdjust enum value corresponding to the provided string representation, or ExtensionAdjust::Unknown if not found.
				</returns>
			</function>
		</functions>

		<constructor>
			<signature>
				Packer()
			</signature>
			<description>
				Initializes a `Packer` object with default settings.
			</description>
		</constructor>

		<methods>

			<function>
				<signature>
					void set_read_path(const String&amp; p_path)
				</signature>
				<description>
					Sets the source directory from which files will be packed.
				</description>
				<param name="p_path">
					The path to the source directory.
				</param>
			</function>

			<function>
				<signature>
					const String&amp; get_read_path() const
				</signature>
				<description>
					Retrieves the source directory path.
				</description>
				<returns>
					The path to the source directory.
				</returns>
			</function>

			<function>
				<signature>
					void set_write_path(const String&amp; p_path)
				</signature>
				<description>
					Sets the destination directory where packed files will be saved.
				</description>
				<param name="p_path">
					The path to the destination directory.
				</param>
			</function>

			<function>
				<signature>
					const String&amp; get_write_path() const
				</signature>
				<description>
					Retrieves the destination directory path.
				</description>
				<returns>
					The path to the destination directory.
				</returns>
			</function>

			<function>
				<signature>
					size_t get_extension_count() const
				</signature>
				<description>
					Gets the number of file extensions in the list.
				</description>
				<returns>
					The number of file extensions.
				</returns>
			</function>

			<function>
				<signature>
					const String get_extension(size_t p_index) const
				</signature>
				<description>
					Retrieves a file extension from the list by its index.
				</description>
				<param name="p_index">
					The index of the extension to retrieve.
				</param>
				<returns>
					The file extension as a string.
				</returns>
			</function>

			<function>
				<signature>
					bool add_extension(const String&amp; p_extension)
				</signature>
				<description>
					Adds a file extension to the list.
				</description>
				<param name="p_extension">
					The file extension to add.
				</param>
				<returns>
					True if the extension was added successfully, false if it already exists in the list.
				</returns>
			</function>

			<function>
				<signature>
					bool remove_extension(const String&amp; p_extension)
				</signature>
				<description>
					Removes a file extension from the list.
				</description>
				<param name="p_extension">
					The file extension to remove.
				</param>
				<returns>
					True if the extension was removed successfully, false if it does not exist in the list.
				</returns>
			</function>

			<function>
				<signature>
					bool has_extension(const String&amp; p_extension) const
				</signature>
				<description>
					Checks if a file extension exists in the list.
				</description>
				<param name="p_extension">
					The file extension to check.
				</param>
				<returns>
					True if the extension exists in the list, false otherwise.
				</returns>
			</function>

			<function>
				<signature>
					void clear_extensions()
				</signature>
				<description>
					Clears the list of file extensions.
				</description>
			</function>

			<function>
				<return-type>void</return-type>
				<name>set_pack_mode</name>
				<parameters>
					<parameter>
						<type>PackMode</type>
						<name>p_mode</name>
					</parameter>
				</parameters>
				<brief>
					Set the pack mode for packing files.
				</brief>
				<description>
					This function allows you to set the pack mode for packing files. The available pack modes are `PackMode::Include`, `PackMode::Exclude`, and `PackMode::Everything`.
				</description>
			</function>

			<function>
				<return-type>PackMode</return-type>
				<name>get_pack_mode</name>
				<brief>
					Get the current pack mode.
				</brief>
				<description>
					Returns the current pack mode for packing files.
				</description>
			</function>

			<function>
				<signature>
					void set_overwrite_files(bool p_enable)
				</signature>
				<description>
					Sets whether to overwrite existing files in the destination directory.
				</description>
				<param name="p_enable">
					True to enable overwriting, false to skip existing files.
				</param>
			</function>

			<function>
				<signature>
					bool get_overwrite_files() const
				</signature>
				<description>
					Retrieves whether overwriting existing files is enabled.
				</description>
				<returns>
					True if overwriting is enabled, false if skipping existing files.
				</returns>
			</function>

			<function>
				<signature>
					void set_move_files(bool p_enable)
				</signature>
				<description>
					Sets whether to move files from the source directory to the destination directory.
				</description>
				<param name="p_enable">
					True to enable moving files, false to copy them.
				</param>
			</function>

			<function>
				<signature>
					bool get_move_files() const
				</signature>
				<description>
					Retrieves whether moving files is enabled.
				</description>
				<returns>
					True if moving files is enabled, false if copying them.
				</returns>
			</function>

			<function>
				<signature>
					void set_suffix_string(const String&amp; p_suffix)
				</signature>
				<description>
					Sets the suffix string to be applied to file names when moving or copying.
				</description>
				<param name="p_suffix">
					The suffix string.
				</param>
			</function>

			<function>
				<signature>
					const String&amp; get_suffix_string() const
				</signature>
				<description>
					Retrieves the suffix string for file names.
				</description>
				<returns>
					The suffix string.
				</returns>
			</function>

			<function>
				<signature>
					void set_suffix_enabled(bool p_enable)
				</signature>
				<description>
					Sets whether the suffix should be applied to file names.
				</description>
				<param name="p_enable">
					True to enable applying the suffix, false to disable it.
				</param>
			</function>

			<function>
				<signature>
					bool get_suffix_enabled() const
				</signature>
				<description>
					Retrieves whether the suffix is enabled.
				</description>
				<returns>
					True if the suffix is enabled, false if disabled.
				</returns>
			</function>

			<function>
				<signature>
					void set_extension_insensitive(bool p_enable)
				</signature>
				<description>
					Sets whether file extension comparisons are case-insensitive.
				</description>
				<param name="p_enable">
					True to enable case-insensitive comparisons, false for case-sensitive.
				</param>
			</function>

			<function>
				<signature>
					bool get_extension_insensitive() const
				</signature>
				<description>
					Retrieves whether file extension comparisons are case-insensitive.
				</description>
				<returns>
					True if case-insensitive comparisons are enabled, false for case-sensitive.
				</returns>
			</function>

			<function>
				<signature>
					void set_extension_adjust(ExtensionCase p_case)
				</signature>
				<description>
					Sets the adjustment to be applied to file extensions (e.g., uppercase or lowercase).
				</description>
				<param name="p_case">
					The adjustment to apply to file extensions.
				</param>
			</function>

			<function>
				<signature>
					ExtensionCase get_extension_adjust() const
				</signature>
				<description>
					Retrieves the adjustment applied to file extensions.
				</description>
				<returns>
					The adjustment to file extensions.
				</returns>
			</function>

			<function>
				<signature>
					void set_ignore_file_name(const String&amp; p_name)
				</signature>
				<description>
					Sets the name of the ignore file used to skip specific directories.
				</description>
				<param name="p_name">
					The name of the ignore file.
				</param>
			</function>

			<function>
				<signature>
					const String&amp; get_ignore_file_name() const
				</signature>
				<description>
					Retrieves the name of the ignore file.
				</description>
				<returns>
					The name of the ignore file.
				</returns>
			</function>

			<function>
				<signature>
					void set_ignore_file_enabled(bool p_enable)
				</signature>
				<description>
					Sets whether the ignore file feature is enabled.
				</description>
				<param name="p_enable">
					True to enable the ignore file feature, false to disable it.
				</param>
			</function>

			<function>
				<signature>
					bool get_ignore_file_enabled() const
				</signature>
				<description>
					Retrieves whether the ignore file feature is enabled.
				</description>
				<returns>
					True if the ignore file feature is enabled, false if disabled.
				</returns>
			</function>

			<function>
				<signature>
					void set_log_enabled(bool p_enable)
				</signature>
				<description>
					Sets whether logging is enabled for the packing process.
				</description>
				<param name="p_enable">
					True to enable logging, false to disable it.
				</param>
			</function>

			<function>
				<signature>
					bool get_log_enabled() const
				</signature>
				<description>
					Retrieves whether logging is enabled for the packing process.
				</description>
				<returns>
					True if logging is enabled, false if disabled.
				</returns>
			</function>

			<function>
				<signature>
					void to_config_file(ConfigFile&amp; p_file) const
				</signature>
				<description>
					Serializes the `Packer` object's configuration to a `ConfigFile`.
				</description>
				<param name="p_file">
					The `ConfigFile` object to store the configuration.
				</param>
			</function>

			<function>
				<signature>
					void from_config_file(const ConfigFile&amp; p_file)
				</signature>
				<description>
					Deserializes the configuration from a `ConfigFile` and updates the `Packer` object's settings.
				</description>
				<param name="p_file">
					The `ConfigFile` object containing the configuration.
				</param>
			</function>

			<function>
				<signature>
					Error save(const String&amp; p_path) const
				</signature>
				<description>
					Saves the `Packer` object's configuration to a file.
				</description>
				<param name="p_path">
					The path to the file where the configuration will be saved.
				</param>
				<returns>
					An error code indicating the success or failure of the save operation.
				</returns>
			</function>

			<function>
				<signature>
					Error load(const String&amp; p_path)
				</signature>
				<description>
					Loads the `Packer` object's configuration from a file.
				</description>
				<param name="p_path">
					The path to the file from which the configuration will be loaded.
				</param>
				<returns>
					An error code indicating the success or failure of the load operation.
				</returns>
			</function>

			<function>
				<signature>
					Error save_encrypted(const String&amp; p_path, const CryptoKey&amp; p_key) const
				</signature>
				<description>
					Saves the `Packer` object's configuration to an encrypted file.
				</description>
				<param name="p_path">
					The path to the encrypted file where the configuration will be saved.
				</param>
				<param name="p_key">
					The encryption key used to protect the configuration.
				</param>
				<returns>
					An error code indicating the success or failure of the save operation.
				</returns>
			</function>

			<function>
				<signature>
					Error load_encrypted(const String&amp; p_path, const CryptoKey&amp; p_key)
				</signature>
				<description>
					Loads the `Packer` object's configuration from an encrypted file.
				</description>
				<param name="p_path">
					The path to the encrypted file from which the configuration will be loaded.
				</param>
				<param name="p_key">
					The encryption key used to decrypt the configuration.
				</param>
				<returns>
					An error code indicating the success or failure of the load operation.
				</returns>
			</function>

			<function>
				<signature>
					void revert_state()
				</signature>
				<description>
					Reverts the `Packer` object's settings to their default values.
				</description>
			</function>

			<function>
				<signature>
					Error pack_files()
				</signature>
				<description>
					Packs files from the source directory to the destination directory based on the `Packer` object's settings.
				</description>
				<returns>
					An error code indicating the success or failure of the packing operation.
				</returns>
			</function>

		</methods>
	</class>
</documentation>
